/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
	"context"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"reflect"
	"strconv"
	"time"

	"github.com/go-logr/logr"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"

	nginxv1 "nginx-operator/api/v1"
	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	v1 "nginx-operator/api/v1"
)

// NginxReconciler reconciles a Nginx object
type NginxReconciler struct {
	client.Client
	Log    logr.Logger
	Scheme *runtime.Scheme
}

// +kubebuilder:rbac:groups=nginx.example.com,resources=nginxes,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=nginx.example.com,resources=nginxes/status,verbs=get;update;patch

func (r *NginxReconciler) Reconcile(req ctrl.Request) (ctrl.Result, error) {
	ctx := context.Background()
	log := r.Log.WithValues("nginx", req.NamespacedName)

	nginxCR := &nginxv1.Nginx{}
	err := r.Get(ctx, req.NamespacedName, nginxCR)
	if err != nil {
		if errors.IsNotFound(err) {
			log.Info("Nginx resource not found. Ignoring since object must be deleted")
			return ctrl.Result{}, nil
		}

		log.Error(err, "Failed to get Nginx")
		return ctrl.Result{}, err
	}

	// check if the deployment already exist, if not, create a new one
	found := &appsv1.Deployment{}
	err = r.Get(ctx, req.NamespacedName, found)
	if err != nil && errors.IsNotFound(err){
		dep := r.deploymentForNginxd(nginxCR)
		log.Info("Creating a new Deployment", "Deployment.NameSpace", dep.Namespace, "Deployment.Name", dep.Name)
		err = r.Create(ctx, dep)
		if err != nil {
			log.Error(err, "Failed to create a new Deployment", "Deployment.NameSpace", dep.Namespace, "Deployment.Name", dep.Name)
			return ctrl.Result{}, err
		}
		return ctrl.Result{Requeue:true}, nil
	} else if err != nil {
		log.Error(err, "Failed to get Deployment")
		return ctrl.Result{}, err
	}

	//iscontrolledby := metav1.IsControlledBy(found, nginxCR)
	//log.Info("** Found Deployment is isControlledBy NginxCR? **", "iscontrolledby", iscontrolledby)

	// Ensure the deployment size is the same as the spec
	size := nginxCR.Spec.Size
	if *found.Spec.Replicas != size {
		log.Info("Change Deployment Replicas")
		found.Spec.Replicas = &size
		err = r.Update(ctx, found)
		if err != nil {
			log.Error(err, "Failed to update deployment", "Deployment.NameSpace", found.Namespace, "Deployment.Name", found.Name)
			return ctrl.Result{}, err
		}
		log.Info("** Change Replicas Done **")
		return ctrl.Result{RequeueAfter: 5*time.Second}, nil
	}

	// Update Nginxd status with the pod names
	// List the pods for this nginx's deployment

	podList := &corev1.PodList{}
	log.Info("Get Pod List")
	listOpts := []client.ListOption{
		client.InNamespace(nginxCR.Namespace),
		client.MatchingLabels(labelsForNginxd(nginxCR.Name)),
	}
	if err = r.List(ctx, podList, listOpts...); err != nil {
		log.Error(err, "Failed to list pods", "Nginx.Namespace", nginxCR.Namespace, "Nginx.Name", nginxCR.Name)
		return ctrl.Result{}, err
	}

	podNames := getPodNames(podList.Items)
	log.Info("** Get Pod Names **")
	if !reflect.DeepEqual(podNames, nginxCR.Status.Nodes){
		log.Info("** Change Status Nodes **", "podnames", podNames)
		nginxCR.Status.Nodes = podNames
		err := r.Status().Update(ctx, nginxCR)
		if err != nil {
			log.Error(err, "Failed to update Nginxcr status")
			return ctrl.Result{}, err
		}
		return ctrl.Result{RequeueAfter: 3*time.Second}, nil
	}

	readyNodes := found.Status.ReadyReplicas
	if !reflect.DeepEqual(readyNodes, nginxCR.Status.ReadyNodes) {
		log.Info("** Change Status readyNodes count **", "readyNodes", readyNodes, "Size", nginxCR.Status.ReadyNodes)
		log.Info("ReadyNodes" + strconv.Itoa(int(readyNodes)))
		nginxCR.Status.ReadyNodes = readyNodes
		err := r.Status().Update(ctx, nginxCR)
		if err != nil {
			log.Error(err, "Failed to update Nginxcf ReadyNodes")
			return ctrl.Result{}, err
		}
	}

	return ctrl.Result{}, nil
}

func (r *NginxReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&nginxv1.Nginx{}).
		Complete(r)
}

// deploymentForMemcached returns a memcached Deployment object
func (r *NginxReconciler) deploymentForNginxd(n *v1.Nginx) *appsv1.Deployment {
	ls := labelsForNginxd(n.Name)
	replicas := n.Spec.Size

	dep := &appsv1.Deployment{
		ObjectMeta: metav1.ObjectMeta{
			Name:      n.Name,
			Namespace: n.Namespace,
		},
		Spec: appsv1.DeploymentSpec{
			Replicas: &replicas,
			Selector: &metav1.LabelSelector{
				MatchLabels: ls,
			},
			Template: corev1.PodTemplateSpec{
				ObjectMeta: metav1.ObjectMeta{
					Labels: ls,
				},
				Spec: corev1.PodSpec{
					Containers: []corev1.Container{{
						Image: n.Spec.Image,
						Name:  n.Name,
					}},
				},
			},
		},
	}
	// Set Memcached instance as the owner and controller
	ctrl.SetControllerReference(n, dep, r.Scheme)
	return dep
}

// labelsForMemcached returns the labels for selecting the resources
// belonging to the given memcached CR name.
func labelsForNginxd(name string) map[string]string {
	return map[string]string{"app": "nginx", "nginx_cr": name}
}

// getPodNames returns the pod names of the array of pods passed in
func getPodNames(pods []corev1.Pod) []string {
	var podNames []string
	for _, pod := range pods {
		podNames = append(podNames, pod.Name)
	}
	return podNames
}
